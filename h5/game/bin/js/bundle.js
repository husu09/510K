var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameExt_1 = require("./scripts/GameExt");
var GameSct_1 = require("./scripts/GameSct");
var LoadExt_1 = require("./scripts/LoadExt");
var MainExt_1 = require("./scripts/MainExt");
var ShopExt_1 = require("./scripts/ShopExt");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("scripts/GameExt.ts", GameExt_1.default);
        reg("scripts/GameSct.ts", GameSct_1.default);
        reg("scripts/LoadExt.ts", LoadExt_1.default);
        reg("scripts/MainExt.ts", MainExt_1.default);
        reg("scripts/ShopExt.ts", ShopExt_1.default);
    };
    GameConfig.width = 1136;
    GameConfig.height = 640;
    GameConfig.scaleMode = "showall";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "Load.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./scripts/GameExt":8,"./scripts/GameSct":9,"./scripts/LoadExt":10,"./scripts/MainExt":11,"./scripts/ShopExt":12}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DataMgr_1 = require("./DataMgr");
var MsgMgr_1 = require("./MsgMgr");
var NetMgr_1 = require("./NetMgr");
var Ctx = /** @class */ (function () {
    function Ctx() {
    }
    Ctx.getAllAssets = function () {
        return Ctx.assets.concat(Ctx.conf);
    };
    /** 消息管理 */
    Ctx.msgMgr = new MsgMgr_1.default();
    /** 数据管理 */
    Ctx.dataMgr = new DataMgr_1.default();
    /** 连接管理 */
    Ctx.netMgr = new NetMgr_1.default();
    /** 预加载资源 */
    Ctx.assets = [
        "res/atlas/common.atlas",
        "res/atlas/common/game.atlas",
        "res/atlas/common/shop.atlas",
    ];
    /** 配置 */
    Ctx.conf = [
        "res/conf/Paramter.json",
    ];
    return Ctx;
}());
exports.default = Ctx;
},{"./DataMgr":4,"./MsgMgr":5,"./NetMgr":6}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Player_1 = require("../data/Player");
var DataMgr = /** @class */ (function () {
    function DataMgr() {
        /** 响应 */
        this.dataFnMap = {};
        this.player = new Player_1.default();
    }
    /** 注册协议 */
    DataMgr.prototype.reg = function (dataName, fn) {
        if (!dataName || !fn) {
            console.error("dataReg error parameter");
            return;
        }
        if (!this.dataFnMap[dataName]) {
            this.dataFnMap[dataName] = [];
        }
        this.dataFnMap[dataName].push(fn);
    };
    /** 更新 */
    DataMgr.prototype.resp = function (dataName) {
        if (this.dataFnMap[dataName]) {
            var fns = this.dataFnMap[dataName];
            for (var i = 0; i < fns.length; i++) {
                fns[i](DataMgr[dataName]);
            }
        }
    };
    return DataMgr;
}());
exports.default = DataMgr;
},{"../data/Player":7}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Byte = Laya.Byte;
var MsgMgr = /** @class */ (function () {
    function MsgMgr() {
        /** 响应 */
        this.msgMap = {};
        this.byte = new Byte();
        this.byte.endian = Byte.LITTLE_ENDIAN;
    }
    /** 注册协议 */
    MsgMgr.prototype.reg = function (msgName, fn) {
        if (!msgName || !fn) {
            console.error("reg error parameter");
            return;
        }
        if (!Msg[msgName]) {
            console.error("reg error " + msgName);
            return;
        }
        if (!this.msgMap[msgName]) {
            this.msgMap[msgName] = [];
        }
        this.msgMap[msgName].push(fn);
    };
    /** 编码协议 */
    MsgMgr.prototype.encode = function (msgName, buffer) {
        this.byte.clear();
        this.byte.writeInt32(0);
        this.byte.writeInt32(msgName.length);
        this.byte.writeUTFBytes(msgName);
        this.byte.writeInt32(buffer.length);
        this.byte.writeArrayBuffer(buffer);
        this.byte.pos = 0;
        this.byte.writeInt32(this.byte.length - 4);
        return this.byte.buffer;
    };
    /** 解码协议 */
    MsgMgr.prototype.decode = function (msgName, buffer) {
        if (!Msg[msgName]) {
            console.error("decode error " + msgName);
            return;
        }
        var msg = Msg[msgName].decode(buffer);
        if (!msg) {
            console.error("decode error parser " + msgName);
            return;
        }
        // 响应
        if (this.msgMap[msgName]) {
            var fns = this.msgMap[msgName];
            for (var i = 0; i < fns.length; i++) {
                fns[i](msg);
            }
        }
    };
    return MsgMgr;
}());
exports.default = MsgMgr;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Socket = Laya.Socket;
var Byte = Laya.Byte;
var Event = Laya.Event;
var Ctx_1 = require("./Ctx");
var NetMgr = /** @class */ (function () {
    function NetMgr() {
        this.socket = new Socket();
        this.byte = new Byte();
        this.socket.endian = Byte.LITTLE_ENDIAN;
        this.byte.endian = Byte.LITTLE_ENDIAN;
    }
    NetMgr.prototype.send = function (name, msg) {
        console.log("send", name);
        var buffer = Msg[name].encode(msg).finish();
        var byteArr = Ctx_1.default.msgMgr.encode(name, buffer);
        this.socket.send(byteArr);
    };
    /** 连接到服务器 */
    NetMgr.prototype.connect = function (url, fn) {
        if (this.socket.connected) {
            return;
        }
        this.callblack = fn;
        this.socket.on(Event.OPEN, this, this.openHandler);
        this.socket.on(Event.MESSAGE, this, this.receiveHandler);
        this.socket.on(Event.CLOSE, this, this.closeHandler);
        this.socket.on(Event.ERROR, this, this.errorHandler);
        this.socket.connectByUrl(url);
    };
    NetMgr.prototype.openHandler = function (event) {
        //正确建立连接
        console.log("net success", event);
        this.callblack();
    };
    NetMgr.prototype.receiveHandler = function (data) {
        //接收到数据触发函数
        this.byte.clear();
        console.log("net receive", data);
        this.byte.writeArrayBuffer(data);
        this.byte.pos = 0;
        var markPos = this.byte.pos;
        var length = this.byte.getInt32();
        if (markPos == this.byte.pos)
            return;
        if (length <= 0) {
            console.error("negative length: ", length);
            return;
        }
        if (this.byte.bytesAvailable < length) {
            this.byte.pos = markPos;
            return;
        }
        var nameLen = this.byte.getInt32();
        var name = this.byte.getUTFBytes(nameLen);
        var dataLen = this.byte.getInt32();
        var arr = this.byte.getUint8Array(this.byte.pos, dataLen);
        Ctx_1.default.msgMgr.decode(name, arr);
    };
    NetMgr.prototype.closeHandler = function (event) {
        //关闭事件
        console.log("net close", event);
    };
    NetMgr.prototype.errorHandler = function (event) {
        //连接出错
        console.log("net error", event);
    };
    return NetMgr;
}());
exports.default = NetMgr;
},{"./Ctx":3}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Ctx_1 = require("../core/Ctx");
var Player = /** @class */ (function (_super) {
    __extends(Player, _super);
    function Player() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Player.syncData = function (msg) {
        if (!msg)
            return;
        if (msg.hasOwnProperty("id"))
            Ctx_1.default.dataMgr.player.id = msg.id;
        if (msg.hasOwnProperty("account"))
            Ctx_1.default.dataMgr.player.account = msg.account;
        if (msg.hasOwnProperty("avatar"))
            Ctx_1.default.dataMgr.player.avatar = msg.avatar;
        if (msg.hasOwnProperty("name"))
            Ctx_1.default.dataMgr.player.name = msg.name;
        if (msg.hasOwnProperty("gender"))
            Ctx_1.default.dataMgr.player.gender = msg.gender;
        if (msg.hasOwnProperty("bean"))
            Ctx_1.default.dataMgr.player.bean = msg.bean;
        if (msg.hasOwnProperty("diamond"))
            Ctx_1.default.dataMgr.player.diamond = msg.diamond;
        Ctx_1.default.dataMgr.resp("player");
    };
    return Player;
}(Msg.PlayerMo));
exports.default = Player;
},{"../core/Ctx":3}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var Handler = Laya.Handler;
var GameSct_1 = require("./GameSct");
var GameExt = /** @class */ (function (_super) {
    __extends(GameExt, _super);
    function GameExt() {
        return _super.call(this) || this;
    }
    GameExt.prototype.onAwake = function () {
        this.gameSct = this.getComponent(GameSct_1.default);
        this.startBtn.clickHandler = new Handler(this, this.start);
    };
    GameExt.prototype.start = function () {
        // let card: Sprite = Pool.getItemByCreateFun("card", this.gameSct.cardPfb.create, this.gameSct.cardPfb);
        // card.pos(Math.random() * (Laya.stage.width - 100), 0);
        // this.box.addChild(card);
        var map = {};
        for (var property in Msg) {
            if (typeof Msg[property] == 'function') {
                map[property] = Msg[property];
            }
        }
        if (map["Login"]) {
            var login_1 = new map["Login"]();
            console.log(login_1);
        }
        var msgname = "Login";
        var login = Msg[msgname].create();
        login.account = "123";
        login.name = "abc";
        var buf = Msg.Login.encode(login).finish();
        var byte = new Laya.Byte();
        byte.writeInt32(0);
        byte.writeInt32(4);
        byte.writeUTFBytes("Login");
        byte.writeInt32(buf.length);
        byte.writeArrayBuffer(buf);
        byte.writeUTFString("");
        byte.pos = 0;
        byte.writeInt32(byte.length);
        console.log(byte.buffer);
        byte.pos = 0;
        var totalLen = byte.getInt32();
        var strLen = byte.getInt32();
        var name = byte.getUTFBytes(strLen);
        var msgLen = byte.getInt32();
        var msg = byte.readUint8Array(byte.pos, msgLen);
        console.log(totalLen);
        console.log(strLen);
        console.log(name);
        console.log(msgLen);
        console.log(msg);
        var nlogin = Msg.Login.decode(buf);
        // alert(nlogin.account);
        // alert(nlogin.name);
    };
    return GameExt;
}(layaMaxUI_1.ui.GameUI));
exports.default = GameExt;
},{"./../ui/layaMaxUI":13,"./GameSct":9}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameSct = /** @class */ (function (_super) {
    __extends(GameSct, _super);
    function GameSct() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GameSct;
}(Laya.Script));
exports.default = GameSct;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var Ctx_1 = require("../core/Ctx");
var Handler = Laya.Handler;
var Player_1 = require("../data/Player");
var LoadExt = /** @class */ (function (_super) {
    __extends(LoadExt, _super);
    function LoadExt() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LoadExt.prototype.onAwake = function () {
        var _this = this;
        // 注册协议
        Ctx_1.default.msgMgr.reg("LoginTo", this.loginToAct);
        Ctx_1.default.msgMgr.reg("TestTo", this.testToAct);
        // 背景颜色
        Laya.stage.bgColor = "#FFFFFF";
        this.loadImg.timer.loop(10, this, function () {
            _this.loadImg.rotation = _this.loadImg.rotation + 1;
        });
        // 连接到服务器
        Ctx_1.default.netMgr.connect("ws://localhost:8080/websocket", function () {
            // 加载资源
            var assets = Ctx_1.default.getAllAssets();
            Laya.loader.load(assets, new Handler(_this, _this.loadComplete), new Handler(_this, _this.loadProgress));
        });
    };
    LoadExt.prototype.loadComplete = function (flag) {
        console.log(Laya.Byte.getSystemEndian());
        if (!flag) {
            console.log("load assets is not all success");
        }
        console.log("compelte");
        var img = Laya.loader.getRes("common/shop/Img_zuan_213.png");
        console.log("img", img);
        var login = Msg.Login.create();
        login.account = "10001";
        Ctx_1.default.netMgr.send("Login", login);
    };
    LoadExt.prototype.loadProgress = function (num) {
        this.numTxt.text = (num * 100).toFixed(0) + "%";
    };
    LoadExt.prototype.loginToAct = function (msg) {
        console.log(msg);
        Player_1.default.syncData(msg.player);
        console.log(Ctx_1.default.dataMgr.player);
    };
    LoadExt.prototype.testToAct = function (msg) {
    };
    return LoadExt;
}(layaMaxUI_1.ui.LoadUI));
exports.default = LoadExt;
},{"../core/Ctx":3,"../data/Player":7,"./../ui/layaMaxUI":13}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var Event = Laya.Event;
var ShopExt_1 = require("./ShopExt");
var MainExt = /** @class */ (function (_super) {
    __extends(MainExt, _super);
    function MainExt() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MainExt.prototype.onAwake = function () {
        this.addBeanBtn.on(Event.CLICK, this, this.showShop, ["peanut"]);
        this.addDiamondBtn.on(Event.CLICK, this, this.showShop, ["diamond"]);
        this.oneSiteBtn.on(Event.CLICK, this, this.showGame, ["one"]);
    };
    MainExt.prototype.showShop = function (type) {
        var shopExt = new ShopExt_1.default(type);
        shopExt.popup();
    };
    MainExt.prototype.showGame = function (type) {
        // let gameExt = new GameExt(type);
        // gameExt.open();
    };
    return MainExt;
}(layaMaxUI_1.ui.MainUI));
exports.default = MainExt;
},{"./../ui/layaMaxUI":13,"./ShopExt":12}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var Event = Laya.Event;
var Handler = Laya.Handler;
var ShopExt = /** @class */ (function (_super) {
    __extends(ShopExt, _super);
    function ShopExt(type) {
        var _this = _super.call(this) || this;
        _this.data = {
            diamond: { img: "common/shop/Img_zuan_213.png", list: [{ item: 10, price: 1 }, { item: 50, price: 5 }, { item: 200, price: 20 }, { item: 500, price: 50 }] },
            peanut: { img: "common/shop/Img_dou_203.png", list: [{ item: 10000, price: 10 }, { item: 50000, price: 50 }, { item: 100000, price: 100 }] },
            note: { img: "common/shop/huode_jishiqi.png", list: [{ item: 20, price: 10 }, { item: 100, price: 50 }, { item: 200, price: 1000 }] },
            double: { img: "common/shop/30020001.png", list: [{ item: 20, price: 10 }, { item: 100, price: 50 }, { item: 200, price: 1000 }] }
        };
        // 当前索引
        _this.currIndex = 0;
        _this.type = type;
        return _this;
    }
    ShopExt.prototype.onAwake = function () {
        var _this = this;
        // 加载图片
        var imgs = [];
        for (var key in this.data) {
            imgs.push(this.data[key].img);
        }
        console.log(imgs);
        Laya.loader.load(imgs, Handler.create(this, function () {
            // 设置图片
            var img = _this.data[_this.type].img;
            var textTure = Laya.loader.getRes(img);
            console.log(textTure);
            _this.iconImg.texture = textTure;
        }));
        this.changeItem(0);
        this.leftBtn.on(Event.CLICK, this, this.changeItem, [-1]);
        this.rightBtn.on(Event.CLICK, this, this.changeItem, [1]);
        this.leftBtn.disabled = true;
    };
    ShopExt.prototype.changeItem = function (offset) {
        var index = this.currIndex + offset;
        var list = this.data[this.type].list;
        if (index < 0 || index > list.length - 1) {
            return;
        }
        this.currIndex = index;
        // 价格文本
        this.itemLeb.text = "x " + list[index].item;
        if (this.type == "diamond") {
            this.diamondImg.visible = false;
            this.priceLab.text = "￥ " + list[index].price;
        }
        else {
            this.diamondImg.visible = true;
            var price = list[index].price + "";
            this.priceLab.text = "x " + price;
            if (price.length > 3)
                this.priceLab.fontSize = 25;
            else
                this.priceLab.fontSize = 30;
        }
        // 左右按钮状态
        if (this.currIndex == 0) {
            this.leftBtn.disabled = true;
        }
        else if (this.currIndex == list.length - 1) {
            this.rightBtn.disabled = true;
        }
        else {
            if (this.leftBtn.disabled)
                this.leftBtn.disabled = false;
            if (this.rightBtn.disabled)
                this.rightBtn.disabled = false;
        }
    };
    return ShopExt;
}(layaMaxUI_1.ui.ShopUI));
exports.default = ShopExt;
},{"./../ui/layaMaxUI":13}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var View = Laya.View;
var Dialog = Laya.Dialog;
var ui;
(function (ui) {
    var GameUI = /** @class */ (function (_super) {
        __extends(GameUI, _super);
        function GameUI() {
            return _super.call(this) || this;
        }
        GameUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("Game");
        };
        return GameUI;
    }(View));
    ui.GameUI = GameUI;
    var LoadUI = /** @class */ (function (_super) {
        __extends(LoadUI, _super);
        function LoadUI() {
            return _super.call(this) || this;
        }
        LoadUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("Load");
        };
        return LoadUI;
    }(View));
    ui.LoadUI = LoadUI;
    var MainUI = /** @class */ (function (_super) {
        __extends(MainUI, _super);
        function MainUI() {
            return _super.call(this) || this;
        }
        MainUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("Main");
        };
        return MainUI;
    }(View));
    ui.MainUI = MainUI;
    var ShopUI = /** @class */ (function (_super) {
        __extends(ShopUI, _super);
        function ShopUI() {
            return _super.call(this) || this;
        }
        ShopUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("Shop");
        };
        return ShopUI;
    }(Dialog));
    ui.ShopUI = ShopUI;
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL1Byb2dyYW0gRmlsZXMgKHg4NikvTGF5YUFpcklERV9iZXRhL3Jlc291cmNlcy9hcHAvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsInNyYy9HYW1lQ29uZmlnLnRzIiwic3JjL01haW4udHMiLCJzcmMvY29yZS9DdHgudHMiLCJzcmMvY29yZS9EYXRhTWdyLnRzIiwic3JjL2NvcmUvTXNnTWdyLnRzIiwic3JjL2NvcmUvTmV0TWdyLnRzIiwic3JjL2RhdGEvUGxheWVyLnRzIiwic3JjL3NjcmlwdHMvR2FtZUV4dC50cyIsInNyYy9zY3JpcHRzL0dhbWVTY3QudHMiLCJzcmMvc2NyaXB0cy9Mb2FkRXh0LnRzIiwic3JjL3NjcmlwdHMvTWFpbkV4dC50cyIsInNyYy9zY3JpcHRzL1Nob3BFeHQudHMiLCJzcmMvdWkvbGF5YU1heFVJLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ1ZBLGdHQUFnRztBQUNoRyw2Q0FBdUM7QUFDdkMsNkNBQXVDO0FBQ3ZDLDZDQUF1QztBQUN2Qyw2Q0FBdUM7QUFDdkMsNkNBQXVDO0FBQ3ZDOztFQUVFO0FBQ0Y7SUFhSTtJQUFjLENBQUM7SUFDUixlQUFJLEdBQVg7UUFDSSxJQUFJLEdBQUcsR0FBYSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUM3QyxHQUFHLENBQUMsb0JBQW9CLEVBQUMsaUJBQU8sQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBQyxpQkFBTyxDQUFDLENBQUM7UUFDbEMsR0FBRyxDQUFDLG9CQUFvQixFQUFDLGlCQUFPLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsb0JBQW9CLEVBQUMsaUJBQU8sQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBQyxpQkFBTyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQXBCTSxnQkFB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dkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQixDQUFDO1FBQ0wsYUFBQztJQUFELENBWkEsQUFZQyxDQVoyQixNQUFNLEdBWWpDO0lBWlksU0FBTSxTQVlsQixDQUFBO0FBQ0wsQ0FBQyxFQTFDYSxFQUFFLEdBQUYsVUFBRSxLQUFGLFVBQUUsUUEwQ2YiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4oZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqVGhpcyBjbGFzcyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBMYXlhQWlySURFLCBwbGVhc2UgZG8gbm90IG1ha2UgYW55IG1vZGlmaWNhdGlvbnMuICovXHJcbmltcG9ydCBHYW1lRXh0IGZyb20gXCIuL3NjcmlwdHMvR2FtZUV4dFwiXG5pbXBvcnQgR2FtZVNjdCBmcm9tIFwiLi9zY3JpcHRzL0dhbWVTY3RcIlxuaW1wb3J0IExvYWRFeHQgZnJvbSBcIi4vc2NyaXB0cy9Mb2FkRXh0XCJcbmltcG9ydCBNYWluRXh0IGZyb20gXCIuL3NjcmlwdHMvTWFpbkV4dFwiXG5pbXBvcnQgU2hvcEV4dCBmcm9tIFwiLi9zY3JpcHRzL1Nob3BFeHRcIlxyXG4vKlxyXG4qIOa4uOaIj+WIneWni+WMlumFjee9rjtcclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUNvbmZpZ3tcclxuICAgIHN0YXRpYyB3aWR0aDpudW1iZXI9MTEzNjtcclxuICAgIHN0YXRpYyBoZWlnaHQ6bnVtYmVyPTY0MDtcclxuICAgIHN0YXRpYyBzY2FsZU1vZGU6c3RyaW5nPVwic2hvd2FsbFwiO1xyXG4gICAgc3RhdGljIHNjcmVlbk1vZGU6c3RyaW5nPVwibm9uZVwiO1xyXG4gICAgc3RhdGljIGFsaWduVjpzdHJpbmc9XCJ0b3BcIjtcclxuICAgIHN0YXRpYyBhbGlnbkg6c3RyaW5nPVwibGVmdFwiO1xyXG4gICAgc3RhdGljIHN0YXJ0U2NlbmU6YW55PVwiTG9hZC5zY2VuZVwiO1xyXG4gICAgc3RhdGljIHNjZW5lUm9vdDpzdHJpbmc9XCJcIjtcclxuICAgIHN0YXRpYyBkZWJ1Zzpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIHN0YXQ6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBwaHlzaWNzRGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBleHBvcnRTY2VuZVRvSnNvbjpib29sZWFuPXRydWU7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe31cclxuICAgIHN0YXRpYyBpbml0KCl7XHJcbiAgICAgICAgdmFyIHJlZzogRnVuY3Rpb24gPSBMYXlhLkNsYXNzVXRpbHMucmVnQ2xhc3M7XHJcbiAgICAgICAgcmVnKFwic2NyaXB0cy9HYW1lRXh0LnRzXCIsR2FtZUV4dCk7XG4gICAgICAgIHJlZyhcInNjcmlwdHMvR2FtZVNjdC50c1wiLEdhbWVTY3QpO1xuICAgICAgICByZWcoXCJzY3JpcHRzL0xvYWRFeHQudHNcIixMb2FkRXh0KTtcbiAgICAgICAgcmVnKFwic2NyaXB0cy9NYWluRXh0LnRzXCIsTWFpbkV4dCk7XG4gICAgICAgIHJlZyhcInNjcmlwdHMvU2hvcEV4dC50c1wiLFNob3BFeHQpO1xyXG4gICAgfVxyXG59XHJcbkdhbWVDb25maWcuaW5pdCgpOyIsImltcG9ydCBHYW1lQ29uZmlnIGZyb20gXCIuL0dhbWVDb25maWdcIjtcclxuaW1wb3J0IHsgdWkgfSBmcm9tIFwiLi91aS9sYXlhTWF4VUlcIjtcclxuY2xhc3MgTWFpbiB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHQvL+agueaNrklEReiuvue9ruWIneWni+WMluW8leaTjlx0XHRcclxuXHRcdGlmICh3aW5kb3dbXCJMYXlhM0RcIl0pIExheWEzRC5pbml0KEdhbWVDb25maWcud2lkdGgsIEdhbWVDb25maWcuaGVpZ2h0KTtcclxuXHRcdGVsc2UgTGF5YS5pbml0KEdhbWVDb25maWcud2lkdGgsIEdhbWVDb25maWcuaGVpZ2h0LCBMYXlhW1wiV2ViR0xcIl0pO1xyXG5cdFx0TGF5YVtcIlBoeXNpY3NcIl0gJiYgTGF5YVtcIlBoeXNpY3NcIl0uZW5hYmxlKCk7XHJcblx0XHRMYXlhW1wiRGVidWdQYW5lbFwiXSAmJiBMYXlhW1wiRGVidWdQYW5lbFwiXS5lbmFibGUoKTtcclxuXHRcdExheWEuc3RhZ2Uuc2NhbGVNb2RlID0gR2FtZUNvbmZpZy5zY2FsZU1vZGU7XHJcblx0XHRMYXlhLnN0YWdlLnNjcmVlbk1vZGUgPSBHYW1lQ29uZmlnLnNjcmVlbk1vZGU7XHJcblx0XHQvL+WFvOWuueW+ruS/oeS4jeaUr+aMgeWKoOi9vXNjZW5l5ZCO57yA5Zy65pmvXHJcblx0XHRMYXlhLlVSTC5leHBvcnRTY2VuZVRvSnNvbiA9IEdhbWVDb25maWcuZXhwb3J0U2NlbmVUb0pzb247XHJcblxyXG5cdFx0Ly/miZPlvIDosIPor5XpnaLmnb/vvIjpgJrov4dJREXorr7nva7osIPor5XmqKHlvI/vvIzmiJbogIV1cmzlnLDlnYDlop7liqBkZWJ1Zz10cnVl5Y+C5pWw77yM5Z2H5Y+v5omT5byA6LCD6K+V6Z2i5p2/77yJXHJcblx0XHRpZiAoR2FtZUNvbmZpZy5kZWJ1ZyB8fCBMYXlhLlV0aWxzLmdldFF1ZXJ5U3RyaW5nKFwiZGVidWdcIikgPT0gXCJ0cnVlXCIpIExheWEuZW5hYmxlRGVidWdQYW5lbCgpO1xyXG5cdFx0aWYgKEdhbWVDb25maWcucGh5c2ljc0RlYnVnICYmIExheWFbXCJQaHlzaWNzRGVidWdEcmF3XCJdKSBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXS5lbmFibGUoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnN0YXQpIExheWEuU3RhdC5zaG93KCk7XHJcblx0XHRMYXlhLmFsZXJ0R2xvYmFsRXJyb3IgPSB0cnVlO1xyXG5cclxuXHRcdC8v5r+A5rS76LWE5rqQ54mI5pys5o6n5Yi277yMdmVyc2lvbi5qc29u55SxSURF5Y+R5biD5Yqf6IO96Ieq5Yqo55Sf5oiQ77yM5aaC5p6c5rKh5pyJ5Lmf5LiN5b2x5ZON5ZCO57ut5rWB56iLXHJcblx0XHRMYXlhLlJlc291cmNlVmVyc2lvbi5lbmFibGUoXCJ2ZXJzaW9uLmpzb25cIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uVmVyc2lvbkxvYWRlZCksIExheWEuUmVzb3VyY2VWZXJzaW9uLkZJTEVOQU1FX1ZFUlNJT04pO1xyXG5cdFx0XHJcblx0fVxyXG5cclxuXHRvblZlcnNpb25Mb2FkZWQoKTogdm9pZCB7XHJcblx0XHQvL+a/gOa0u+Wkp+Wwj+WbvuaYoOWwhO+8jOWKoOi9veWwj+WbvueahOaXtuWAme+8jOWmguaenOWPkeeOsOWwj+WbvuWcqOWkp+WbvuWQiOmbhumHjOmdou+8jOWImeS8mOWFiOWKoOi9veWkp+WbvuWQiOmbhu+8jOiAjOS4jeaYr+Wwj+WbvlxyXG5cdFx0TGF5YS5BdGxhc0luZm9NYW5hZ2VyLmVuYWJsZShcImZpbGVjb25maWcuanNvblwiLCBMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsIHRoaXMub25Db25maWdMb2FkZWQpKTtcclxuXHR9XHJcblxyXG5cdG9uQ29uZmlnTG9hZGVkKCk6IHZvaWQge1xyXG5cdFx0Ly/liqDovb1JREXmjIflrprnmoTlnLrmma9cclxuXHRcdEdhbWVDb25maWcuc3RhcnRTY2VuZSAmJiBMYXlhLlNjZW5lLm9wZW4oR2FtZUNvbmZpZy5zdGFydFNjZW5lKTtcclxuXHR9XHJcbn1cclxuLy/mv4DmtLvlkK/liqjnsbtcclxubmV3IE1haW4oKTtcclxuIiwiaW1wb3J0IERhdGFNZ3IgZnJvbSBcIi4vRGF0YU1nclwiO1xyXG5pbXBvcnQgTXNnTWdyIGZyb20gXCIuL01zZ01nclwiO1xyXG5pbXBvcnQgTmV0TWdyIGZyb20gXCIuL05ldE1nclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3R4IHtcclxuICAgIFxyXG4gICAgLyoqIOa2iOaBr+euoeeQhiAqL1xyXG4gICAgc3RhdGljIG1zZ01ncjogTXNnTWdyID0gbmV3IE1zZ01ncigpO1xyXG4gICAgLyoqIOaVsOaNrueuoeeQhiAqL1xyXG4gICAgc3RhdGljIGRhdGFNZ3I6IERhdGFNZ3IgPSBuZXcgRGF0YU1ncigpO1xyXG4gICAgLyoqIOi/nuaOpeeuoeeQhiAqL1xyXG4gICAgc3RhdGljIG5ldE1ncjogTmV0TWdyID0gbmV3IE5ldE1ncigpO1xyXG5cclxuICAgIC8qKiDpooTliqDovb3otYTmupAgKi9cclxuICAgIHN0YXRpYyBhc3NldHMgPSBbXHJcbiAgICAgICAgXCJyZXMvYXRsYXMvY29tbW9uLmF0bGFzXCIsXHJcbiAgICAgICAgXCJyZXMvYXRsYXMvY29tbW9uL2dhbWUuYXRsYXNcIixcclxuICAgICAgICBcInJlcy9hdGxhcy9jb21tb24vc2hvcC5hdGxhc1wiLFxyXG4gICAgXTtcclxuXHJcbiAgICAvKiog6YWN572uICovXHJcbiAgICBzdGF0aWMgY29uZiA9IFtcclxuICAgICAgICBcInJlcy9jb25mL1BhcmFtdGVyLmpzb25cIixcclxuICAgIF07XHJcblxyXG4gICAgc3RhdGljIGdldEFsbEFzc2V0cygpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiBDdHguYXNzZXRzLmNvbmNhdChDdHguY29uZik7XHJcbiAgICB9XHJcbiAgICBcclxufSIsImltcG9ydCBQbGF5ZXIgZnJvbSBcIi4uL2RhdGEvUGxheWVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhTWdyIHtcclxuICAgIC8qKiDlk43lupQgKi9cclxuICAgIGRhdGFGbk1hcCA9IHt9O1xyXG5cclxuICAgIHBsYXllcjogUGxheWVyID0gbmV3IFBsYXllcigpO1xyXG5cclxuICAgIC8qKiDms6jlhozljY/orq4gKi9cclxuICAgIHJlZyhkYXRhTmFtZSwgZm4pOiB2b2lkIHtcclxuICAgICAgICBpZiAoICFkYXRhTmFtZSB8fCAhZm4pIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImRhdGFSZWcgZXJyb3IgcGFyYW1ldGVyXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5kYXRhRm5NYXBbZGF0YU5hbWVdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YUZuTWFwW2RhdGFOYW1lXSA9IFtdXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGF0YUZuTWFwW2RhdGFOYW1lXS5wdXNoKGZuKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pu05pawICovXHJcbiAgICByZXNwKGRhdGFOYW1lKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YUZuTWFwW2RhdGFOYW1lXSkge1xyXG4gICAgICAgICAgICBsZXQgZm5zID0gdGhpcy5kYXRhRm5NYXBbZGF0YU5hbWVdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm5zW2ldKERhdGFNZ3JbZGF0YU5hbWVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0gIiwiaW1wb3J0IEJ5dGUgPSBMYXlhLkJ5dGU7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1zZ01nciB7XHJcblxyXG4gICAgLyoqIOWTjeW6lCAqL1xyXG4gICAgbXNnTWFwID0ge307XHJcbiAgICBieXRlOiBCeXRlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYnl0ZSA9IG5ldyBCeXRlKCk7XHJcbiAgICAgICAgdGhpcy5ieXRlLmVuZGlhbiA9IEJ5dGUuTElUVExFX0VORElBTjtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5rOo5YaM5Y2P6K6uICovXHJcbiAgICByZWcobXNnTmFtZSwgZm4pOiB2b2lkIHtcclxuICAgICAgICBpZiAoICFtc2dOYW1lIHx8ICFmbikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwicmVnIGVycm9yIHBhcmFtZXRlclwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIU1zZ1ttc2dOYW1lXSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwicmVnIGVycm9yIFwiICsgIG1zZ05hbWUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5tc2dNYXBbbXNnTmFtZV0pIHtcclxuICAgICAgICAgICAgdGhpcy5tc2dNYXBbbXNnTmFtZV0gPSBbXVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1zZ01hcFttc2dOYW1lXS5wdXNoKGZuKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog57yW56CB5Y2P6K6uICovXHJcbiAgICBlbmNvZGUobXNnTmFtZTogc3RyaW5nLCBidWZmZXI6IFVpbnQ4QXJyYXkpOiBBcnJheUJ1ZmZlciB7XHJcbiAgICAgICAgdGhpcy5ieXRlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5ieXRlLndyaXRlSW50MzIoMCk7XHJcbiAgICAgICAgdGhpcy5ieXRlLndyaXRlSW50MzIobXNnTmFtZS5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuYnl0ZS53cml0ZVVURkJ5dGVzKG1zZ05hbWUpO1xyXG4gICAgICAgIHRoaXMuYnl0ZS53cml0ZUludDMyKGJ1ZmZlci5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuYnl0ZS53cml0ZUFycmF5QnVmZmVyKGJ1ZmZlcik7XHJcbiAgICAgICAgdGhpcy5ieXRlLnBvcyA9IDA7XHJcbiAgICAgICAgdGhpcy5ieXRlLndyaXRlSW50MzIodGhpcy5ieXRlLmxlbmd0aCAtIDQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGUuYnVmZmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDop6PnoIHljY/orq4gKi9cclxuICAgIGRlY29kZShtc2dOYW1lOiBzdHJpbmcsIGJ1ZmZlcjogVWludDhBcnJheSkge1xyXG4gICAgICAgIGlmICghTXNnW21zZ05hbWVdKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJkZWNvZGUgZXJyb3IgXCIgKyAgbXNnTmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG1zZyA9IE1zZ1ttc2dOYW1lXS5kZWNvZGUoYnVmZmVyKTtcclxuICAgICAgICBpZiAoIW1zZykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZGVjb2RlIGVycm9yIHBhcnNlciBcIiArICBtc2dOYW1lKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlk43lupRcclxuICAgICAgICBpZiAodGhpcy5tc2dNYXBbbXNnTmFtZV0pIHtcclxuICAgICAgICAgICAgbGV0IGZucyA9IHRoaXMubXNnTWFwW21zZ05hbWVdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm5zW2ldKG1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59IiwiXHJcbmltcG9ydCBTb2NrZXQgPSBMYXlhLlNvY2tldDtcclxuaW1wb3J0IEJ5dGUgPSBMYXlhLkJ5dGU7XHJcbmltcG9ydCBFdmVudCA9IExheWEuRXZlbnQ7XHJcbmltcG9ydCBDdHggZnJvbSBcIi4vQ3R4XCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5ldE1nciB7XHJcbiAgICBwcml2YXRlIHNvY2tldDogU29ja2V0O1xyXG4gICAgcHJpdmF0ZSBjYWxsYmxhY2s7XHJcbiAgICBwcml2YXRlIGJ5dGU6IEJ5dGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBuZXcgU29ja2V0KCk7XHJcbiAgICAgICAgdGhpcy5ieXRlID0gbmV3IEJ5dGUoKTtcclxuICAgICAgICB0aGlzLnNvY2tldC5lbmRpYW4gPSBCeXRlLkxJVFRMRV9FTkRJQU47XHJcbiAgICAgICAgdGhpcy5ieXRlLmVuZGlhbiA9IEJ5dGUuTElUVExFX0VORElBTjtcclxuICAgIH1cclxuXHJcbiAgICBzZW5kKG5hbWU6IHN0cmluZywgbXNnOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInNlbmRcIiwgbmFtZSk7XHJcbiAgICAgICAgbGV0IGJ1ZmZlciA9IE1zZ1tuYW1lXS5lbmNvZGUobXNnKS5maW5pc2goKTtcclxuICAgICAgICBsZXQgYnl0ZUFyciA9IEN0eC5tc2dNZ3IuZW5jb2RlKG5hbWUsIGJ1ZmZlcik7XHJcbiAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChieXRlQXJyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6L+e5o6l5Yiw5pyN5Yqh5ZmoICovXHJcbiAgICBjb25uZWN0KHVybCwgZm4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5zb2NrZXQuY29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYWxsYmxhY2sgPSBmbjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNvY2tldC5vbihFdmVudC5PUEVOLCB0aGlzLCB0aGlzLm9wZW5IYW5kbGVyKTtcclxuICAgICAgICB0aGlzLnNvY2tldC5vbihFdmVudC5NRVNTQUdFLCB0aGlzLCB0aGlzLnJlY2VpdmVIYW5kbGVyKTtcclxuICAgICAgICB0aGlzLnNvY2tldC5vbihFdmVudC5DTE9TRSwgdGhpcywgdGhpcy5jbG9zZUhhbmRsZXIpO1xyXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKEV2ZW50LkVSUk9SLCB0aGlzLCB0aGlzLmVycm9ySGFuZGxlcik7XHJcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdEJ5VXJsKHVybCk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbkhhbmRsZXIoZXZlbnQpOiB2b2lkIHtcclxuICAgICAgICAvL+ato+ehruW7uueri+i/nuaOpVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibmV0IHN1Y2Nlc3NcIiwgZXZlbnQpO1xyXG4gICAgICAgIHRoaXMuY2FsbGJsYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVjZWl2ZUhhbmRsZXIoZGF0YSk6IHZvaWQge1xyXG4gICAgICAgIC8v5o6l5pS25Yiw5pWw5o2u6Kem5Y+R5Ye95pWwXHJcbiAgICAgICAgdGhpcy5ieXRlLmNsZWFyKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJuZXQgcmVjZWl2ZVwiLCBkYXRhKTtcclxuICAgICAgICB0aGlzLmJ5dGUud3JpdGVBcnJheUJ1ZmZlcihkYXRhKTtcclxuICAgICAgICB0aGlzLmJ5dGUucG9zID0gMDtcclxuICAgICAgICBsZXQgbWFya1BvcyA9IHRoaXMuYnl0ZS5wb3M7XHJcbiAgICAgICAgbGV0IGxlbmd0aCA9IHRoaXMuYnl0ZS5nZXRJbnQzMigpO1xyXG4gICAgICAgIGlmIChtYXJrUG9zID09IHRoaXMuYnl0ZS5wb3MpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAobGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIm5lZ2F0aXZlIGxlbmd0aDogXCIsIGxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYnl0ZS5ieXRlc0F2YWlsYWJsZSA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ5dGUucG9zID0gbWFya1BvcztcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbmFtZUxlbiA9IHRoaXMuYnl0ZS5nZXRJbnQzMigpO1xyXG4gICAgICAgIGxldCBuYW1lID0gdGhpcy5ieXRlLmdldFVURkJ5dGVzKG5hbWVMZW4pO1xyXG4gICAgICAgIGxldCBkYXRhTGVuID0gdGhpcy5ieXRlLmdldEludDMyKCk7XHJcbiAgICAgICAgbGV0IGFyciA9IHRoaXMuYnl0ZS5nZXRVaW50OEFycmF5KHRoaXMuYnl0ZS5wb3MsIGRhdGFMZW4pO1xyXG4gICAgICAgIEN0eC5tc2dNZ3IuZGVjb2RlKG5hbWUsIGFycik7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2VIYW5kbGVyKGV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgLy/lhbPpl63kuovku7ZcclxuICAgICAgICBjb25zb2xlLmxvZyhcIm5ldCBjbG9zZVwiLCBldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZXJyb3JIYW5kbGVyKGV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgLy/ov57mjqXlh7rplJlcclxuICAgICAgICBjb25zb2xlLmxvZyhcIm5ldCBlcnJvclwiLCBldmVudCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgQ3R4IGZyb20gXCIuLi9jb3JlL0N0eFwiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIgZXh0ZW5kcyBNc2cuUGxheWVyTW8ge1xyXG4gXHJcbiAgICBzdGF0aWMgc3luY0RhdGEobXNnOiBNc2cuSVBsYXllck1vKSB7XHJcbiAgICAgICAgaWYgKCFtc2cpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAobXNnLmhhc093blByb3BlcnR5KFwiaWRcIikpXHJcbiAgICAgICAgICAgIEN0eC5kYXRhTWdyLnBsYXllci5pZCA9IG1zZy5pZDtcclxuICAgICAgICBpZiAobXNnLmhhc093blByb3BlcnR5KFwiYWNjb3VudFwiKSlcclxuICAgICAgICAgICAgQ3R4LmRhdGFNZ3IucGxheWVyLmFjY291bnQgPSBtc2cuYWNjb3VudDtcclxuICAgICAgICBpZiAobXNnLmhhc093blByb3BlcnR5KFwiYXZhdGFyXCIpKVxyXG4gICAgICAgICAgICBDdHguZGF0YU1nci5wbGF5ZXIuYXZhdGFyID0gbXNnLmF2YXRhcjtcclxuICAgICAgICBpZiAobXNnLmhhc093blByb3BlcnR5KFwibmFtZVwiKSlcclxuICAgICAgICAgICAgQ3R4LmRhdGFNZ3IucGxheWVyLm5hbWUgPSBtc2cubmFtZTtcclxuICAgICAgICBpZiAobXNnLmhhc093blByb3BlcnR5KFwiZ2VuZGVyXCIpKVxyXG4gICAgICAgICAgICBDdHguZGF0YU1nci5wbGF5ZXIuZ2VuZGVyID0gbXNnLmdlbmRlcjtcclxuICAgICAgICBpZiAobXNnLmhhc093blByb3BlcnR5KFwiYmVhblwiKSlcclxuICAgICAgICAgICAgQ3R4LmRhdGFNZ3IucGxheWVyLmJlYW4gPSBtc2cuYmVhbjtcclxuICAgICAgICBpZiAobXNnLmhhc093blByb3BlcnR5KFwiZGlhbW9uZFwiKSlcclxuICAgICAgICAgICAgQ3R4LmRhdGFNZ3IucGxheWVyLmRpYW1vbmQgPSBtc2cuZGlhbW9uZDtcclxuICAgICAgICBDdHguZGF0YU1nci5yZXNwKFwicGxheWVyXCIpO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCB7IHVpIH0gZnJvbSBcIi4vLi4vdWkvbGF5YU1heFVJXCI7XHJcbmltcG9ydCBFdmVudCA9IExheWEuRXZlbnQ7XHJcbmltcG9ydCBTY2VuZSA9IExheWEuU2NlbmU7XHJcbmltcG9ydCBJbWFnZSA9IExheWEuSW1hZ2U7XHJcbmltcG9ydCBCdXR0b24gPSBMYXlhLkJ1dHRvbjtcclxuaW1wb3J0IEhhbmRsZXIgPSBMYXlhLkhhbmRsZXI7XHJcbmltcG9ydCBTcHJpdGUgPSBMYXlhLlNwcml0ZTtcclxuaW1wb3J0IFBvb2wgPSBMYXlhLlBvb2w7XHJcbmltcG9ydCBHYW1lU2N0IGZyb20gXCIuL0dhbWVTY3RcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUV4dCBleHRlbmRzIHVpLkdhbWVVSSB7XHJcbiAgICBcclxuICAgIHByaXZhdGUgZ2FtZVNjdDogR2FtZVNjdDtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Bd2FrZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTY3QgPSB0aGlzLmdldENvbXBvbmVudChHYW1lU2N0KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnN0YXJ0QnRuLmNsaWNrSGFuZGxlciA9IG5ldyBIYW5kbGVyKHRoaXMsIHRoaXMuc3RhcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIGxldCBjYXJkOiBTcHJpdGUgPSBQb29sLmdldEl0ZW1CeUNyZWF0ZUZ1bihcImNhcmRcIiwgdGhpcy5nYW1lU2N0LmNhcmRQZmIuY3JlYXRlLCB0aGlzLmdhbWVTY3QuY2FyZFBmYik7XHJcbiAgICAgICAgLy8gY2FyZC5wb3MoTWF0aC5yYW5kb20oKSAqIChMYXlhLnN0YWdlLndpZHRoIC0gMTAwKSwgMCk7XHJcbiAgICAgICAgLy8gdGhpcy5ib3guYWRkQ2hpbGQoY2FyZCk7XHJcblxyXG4gICAgICAgIGxldCBtYXAgPSB7fVxyXG4gICAgICAgIGZvciAobGV0IHByb3BlcnR5IGluIE1zZykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIE1zZ1twcm9wZXJ0eV0gPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgbWFwW3Byb3BlcnR5XSA9IE1zZ1twcm9wZXJ0eV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWFwW1wiTG9naW5cIl0pIHtcclxuICAgICAgICAgICAgbGV0IGxvZ2luID0gbmV3IG1hcFtcIkxvZ2luXCJdKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvZ2luKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgbXNnbmFtZSA9IFwiTG9naW5cIjtcclxuXHJcbiAgICAgICAgbGV0IGxvZ2luID0gTXNnW21zZ25hbWVdLmNyZWF0ZSgpO1xyXG4gICAgICAgIGxvZ2luLmFjY291bnQgPSBcIjEyM1wiO1xyXG4gICAgICAgIGxvZ2luLm5hbWUgPSBcImFiY1wiO1xyXG4gICAgICAgIGxldCBidWYgPSBNc2cuTG9naW4uZW5jb2RlKGxvZ2luKS5maW5pc2goKTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgYnl0ZSA9IG5ldyBMYXlhLkJ5dGUoKTtcclxuICAgICAgICBieXRlLndyaXRlSW50MzIoMCk7XHJcbiAgICAgICAgYnl0ZS53cml0ZUludDMyKDQpO1xyXG4gICAgICAgIGJ5dGUud3JpdGVVVEZCeXRlcyhcIkxvZ2luXCIpO1xyXG4gICAgICAgIGJ5dGUud3JpdGVJbnQzMihidWYubGVuZ3RoKTtcclxuICAgICAgICBieXRlLndyaXRlQXJyYXlCdWZmZXIoYnVmKTtcclxuICAgICAgICBieXRlLndyaXRlVVRGU3RyaW5nKFwiXCIpO1xyXG4gICAgICAgIGJ5dGUucG9zID0gMDtcclxuICAgICAgICBieXRlLndyaXRlSW50MzIoYnl0ZS5sZW5ndGgpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhieXRlLmJ1ZmZlcik7XHJcblxyXG4gICAgICAgIGJ5dGUucG9zID0gMDtcclxuICAgICAgICBsZXQgdG90YWxMZW4gPSBieXRlLmdldEludDMyKCk7XHJcbiAgICAgICAgbGV0IHN0ckxlbiA9IGJ5dGUuZ2V0SW50MzIoKTtcclxuICAgICAgICBsZXQgbmFtZSA9IGJ5dGUuZ2V0VVRGQnl0ZXMoc3RyTGVuKTtcclxuICAgICAgICBsZXQgbXNnTGVuID0gYnl0ZS5nZXRJbnQzMigpO1xyXG4gICAgICAgIGxldCBtc2cgPSBieXRlLnJlYWRVaW50OEFycmF5KGJ5dGUucG9zLCBtc2dMZW4pO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyh0b3RhbExlbik7XHJcbiAgICAgICAgY29uc29sZS5sb2coc3RyTGVuKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhuYW1lKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhtc2dMZW4pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgbGV0IG5sb2dpbiA9IE1zZy5Mb2dpbi5kZWNvZGUoYnVmKTtcclxuICAgICAgICAvLyBhbGVydChubG9naW4uYWNjb3VudCk7XHJcbiAgICAgICAgLy8gYWxlcnQobmxvZ2luLm5hbWUpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG59IiwiaW1wb3J0IE1haW5FeHQgZnJvbSBcIi4vTWFpbkV4dFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVNjdCBleHRlbmRzIExheWEuU2NyaXB0IHtcclxuICAgIC8qKiBAcHJvcCB7bmFtZTogY2FyZFBmYiwgdHlwZTogUHJlZmFifSAqL1xyXG4gICAgY2FyZFBmYjogTGF5YS5QcmVmYWI7XHJcbiAgICBcclxufSIsImltcG9ydCB7IHVpIH0gZnJvbSBcIi4vLi4vdWkvbGF5YU1heFVJXCI7XHJcbmltcG9ydCBOZXRNZ3IgZnJvbSBcIi4uL2NvcmUvTmV0TWdyXCI7XHJcbmltcG9ydCBDdHggZnJvbSBcIi4uL2NvcmUvQ3R4XCI7XHJcbmltcG9ydCBMb2FkZXIgID0gTGF5YS5Mb2FkZXI7XHJcbmltcG9ydCBIYW5kbGVyID0gTGF5YS5IYW5kbGVyO1xyXG5pbXBvcnQgQ29sb3IgPSBMYXlhLkNvbG9yO1xyXG5pbXBvcnQgU3ByaXRlID0gTGF5YS5TcHJpdGU7XHJcbmltcG9ydCBFdmVudCA9IExheWEuRXZlbnQ7XHJcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4uL2RhdGEvUGxheWVyXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRFeHQgZXh0ZW5kcyB1aS5Mb2FkVUkge1xyXG4gICAgXHJcblxyXG5cclxuICAgIG9uQXdha2UoKTogdm9pZCB7XHJcbiAgICAgICAgLy8g5rOo5YaM5Y2P6K6uXHJcbiAgICAgICAgQ3R4Lm1zZ01nci5yZWcoXCJMb2dpblRvXCIsIHRoaXMubG9naW5Ub0FjdCk7XHJcbiAgICAgICAgQ3R4Lm1zZ01nci5yZWcoXCJUZXN0VG9cIiwgdGhpcy50ZXN0VG9BY3QpO1xyXG5cclxuICAgICAgICAvLyDog4zmma/popzoibJcclxuICAgICAgICBMYXlhLnN0YWdlLmJnQ29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkSW1nLnRpbWVyLmxvb3AoMTAsIHRoaXMgLCAoKT0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkSW1nLnJvdGF0aW9uID0gdGhpcy5sb2FkSW1nLnJvdGF0aW9uICsgMTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g6L+e5o6l5Yiw5pyN5Yqh5ZmoXHJcbiAgICAgICAgQ3R4Lm5ldE1nci5jb25uZWN0KFwid3M6Ly9sb2NhbGhvc3Q6ODA4MC93ZWJzb2NrZXRcIiwgKCk9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDliqDovb3otYTmupBcclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IEN0eC5nZXRBbGxBc3NldHMoKTtcclxuICAgICAgICAgICAgTGF5YS5sb2FkZXIubG9hZChhc3NldHMsIG5ldyBIYW5kbGVyKHRoaXMsIHRoaXMubG9hZENvbXBsZXRlKSwgbmV3IEhhbmRsZXIodGhpcywgdGhpcy5sb2FkUHJvZ3Jlc3MpKTsgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgbG9hZENvbXBsZXRlKGZsYWcpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhMYXlhLkJ5dGUuZ2V0U3lzdGVtRW5kaWFuKCkpO1xyXG4gICAgICAgIGlmICghZmxhZykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvYWQgYXNzZXRzIGlzIG5vdCBhbGwgc3VjY2Vzc1wiKVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhcImNvbXBlbHRlXCIpO1xyXG4gICAgICAgIGxldCBpbWcgPSBMYXlhLmxvYWRlci5nZXRSZXMoXCJjb21tb24vc2hvcC9JbWdfenVhbl8yMTMucG5nXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiaW1nXCIsIGltZyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGxvZ2luID0gTXNnLkxvZ2luLmNyZWF0ZSgpO1xyXG4gICAgICAgIGxvZ2luLmFjY291bnQgPSBcIjEwMDAxXCI7XHJcblxyXG4gICAgICAgIEN0eC5uZXRNZ3Iuc2VuZChcIkxvZ2luXCIsIGxvZ2luKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbG9hZFByb2dyZXNzKG51bSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubnVtVHh0LnRleHQgPSAobnVtICogMTAwKS50b0ZpeGVkKDApKyBcIiVcIjtcclxuICAgIH1cclxuXHJcbiAgICBsb2dpblRvQWN0KG1zZzogTXNnLkxvZ2luVG8pOiB2b2lkICB7XHJcbiAgICAgICAgY29uc29sZS5sb2cobXNnKTtcclxuICAgICAgICBQbGF5ZXIuc3luY0RhdGEobXNnLnBsYXllcik7XHJcbiAgICAgICAgY29uc29sZS5sb2coQ3R4LmRhdGFNZ3IucGxheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICB0ZXN0VG9BY3QobXNnOiBNc2cuVGVzdFRvKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IHVpIH0gZnJvbSBcIi4vLi4vdWkvbGF5YU1heFVJXCI7XHJcbmltcG9ydCBFdmVudCA9IExheWEuRXZlbnQ7XHJcbmltcG9ydCBTY2VuZSA9IExheWEuU2NlbmU7XHJcbmltcG9ydCBJbWFnZSA9IExheWEuSW1hZ2U7XHJcbmltcG9ydCBCdXR0b24gPSBMYXlhLkJ1dHRvbjtcclxuaW1wb3J0IEhhbmRsZXIgPSBMYXlhLkhhbmRsZXI7XHJcbmltcG9ydCBTaG9wRXh0IGZyb20gXCIuL1Nob3BFeHRcIjtcclxuaW1wb3J0IEdhbWVFeHQgZnJvbSBcIi4vR2FtZUV4dFwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluRXh0IGV4dGVuZHMgdWkuTWFpblVJIHtcclxuICAgIG9uQXdha2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hZGRCZWFuQnRuLm9uKEV2ZW50LkNMSUNLLCB0aGlzLCB0aGlzLnNob3dTaG9wLCBbXCJwZWFudXRcIl0pO1xyXG4gICAgICAgIHRoaXMuYWRkRGlhbW9uZEJ0bi5vbihFdmVudC5DTElDSywgdGhpcywgdGhpcy5zaG93U2hvcCwgW1wiZGlhbW9uZFwiXSk7XHJcbiAgICAgICAgdGhpcy5vbmVTaXRlQnRuLm9uKEV2ZW50LkNMSUNLLCB0aGlzLCB0aGlzLnNob3dHYW1lLCBbXCJvbmVcIl0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dTaG9wKHR5cGUpOiB2b2lkIHtcclxuICAgICAgICBsZXQgc2hvcEV4dCA9IG5ldyBTaG9wRXh0KHR5cGUpO1xyXG4gICAgICAgIHNob3BFeHQucG9wdXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93R2FtZSh0eXBlKTogdm9pZCB7XHJcbiAgICAgICAgLy8gbGV0IGdhbWVFeHQgPSBuZXcgR2FtZUV4dCh0eXBlKTtcclxuICAgICAgICAvLyBnYW1lRXh0Lm9wZW4oKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IHVpIH0gZnJvbSBcIi4vLi4vdWkvbGF5YU1heFVJXCI7XHJcbmltcG9ydCBFdmVudCA9IExheWEuRXZlbnQ7XHJcbmltcG9ydCBTY2VuZSA9IExheWEuU2NlbmU7XHJcbmltcG9ydCBJbWFnZSA9IExheWEuSW1hZ2U7XHJcbmltcG9ydCBCdXR0b24gPSBMYXlhLkJ1dHRvbjtcclxuaW1wb3J0IEhhbmRsZXIgPSBMYXlhLkhhbmRsZXI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNob3BFeHQgZXh0ZW5kcyB1aS5TaG9wVUkge1xyXG5cclxuICAgIGRhdGEgPSB7XHJcbiAgICAgICAgZGlhbW9uZDoge2ltZzogXCJjb21tb24vc2hvcC9JbWdfenVhbl8yMTMucG5nXCIgLCBsaXN0OiBbe2l0ZW06IDEwLCBwcmljZTogMX0sIHtpdGVtOiA1MCwgcHJpY2U6IDV9LCB7aXRlbTogMjAwLCBwcmljZTogMjB9LCB7aXRlbTo1MDAsIHByaWNlOiA1MH1dfSxcclxuICAgICAgICBwZWFudXQ6IHtpbWc6IFwiY29tbW9uL3Nob3AvSW1nX2RvdV8yMDMucG5nXCIgLCBsaXN0OiBbe2l0ZW06IDEwMDAwLCBwcmljZTogMTB9LCB7aXRlbTogNTAwMDAsIHByaWNlOiA1MH0sIHtpdGVtOiAxMDAwMDAsIHByaWNlOiAxMDB9XX0sXHJcbiAgICAgICAgbm90ZToge2ltZzogXCJjb21tb24vc2hvcC9odW9kZV9qaXNoaXFpLnBuZ1wiICwgbGlzdDogW3tpdGVtOiAyMCwgcHJpY2U6IDEwfSwge2l0ZW06IDEwMCwgcHJpY2U6IDUwfSwge2l0ZW06IDIwMCwgcHJpY2U6IDEwMDB9XX0sXHJcbiAgICAgICAgZG91YmxlOiB7aW1nOiBcImNvbW1vbi9zaG9wLzMwMDIwMDAxLnBuZ1wiICwgbGlzdDogW3tpdGVtOiAyMCwgcHJpY2U6IDEwfSwge2l0ZW06IDEwMCwgcHJpY2U6IDUwfSwge2l0ZW06IDIwMCwgcHJpY2U6IDEwMDB9XX1cclxuICAgICAgICB9O1xyXG4gICAgLy8g5b2T5YmN57Si5byVXHJcbiAgICBjdXJySW5kZXggPSAwO1xyXG4gICAgLy8g5ZWG5bqX57G75Z6LXHJcbiAgICB0eXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBvbkF3YWtlKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIOWKoOi9veWbvueJh1xyXG4gICAgICAgIGxldCBpbWdzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgICBpbWdzLnB1c2godGhpcy5kYXRhW2tleV0uaW1nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coaW1ncyk7XHJcbiAgICAgICAgTGF5YS5sb2FkZXIubG9hZChpbWdzLCBIYW5kbGVyLmNyZWF0ZSh0aGlzLCAoKT0+IHtcclxuICAgICAgICAgICAgLy8g6K6+572u5Zu+54mHXHJcbiAgICAgICAgICAgIGxldCBpbWcgPSB0aGlzLmRhdGFbdGhpcy50eXBlXS5pbWc7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0VHVyZSA9IExheWEubG9hZGVyLmdldFJlcyhpbWcpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0VHVyZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaWNvbkltZy50ZXh0dXJlID0gdGV4dFR1cmU7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuY2hhbmdlSXRlbSgwKTtcclxuXHJcbiAgICAgICAgdGhpcy5sZWZ0QnRuLm9uKEV2ZW50LkNMSUNLLCB0aGlzLCB0aGlzLmNoYW5nZUl0ZW0sIFstMV0pO1xyXG4gICAgICAgIHRoaXMucmlnaHRCdG4ub24oRXZlbnQuQ0xJQ0ssIHRoaXMsIHRoaXMuY2hhbmdlSXRlbSwgWzFdKTtcclxuICAgICAgICB0aGlzLmxlZnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgY2hhbmdlSXRlbShvZmZzZXQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuY3VyckluZGV4ICsgb2Zmc2V0O1xyXG4gICAgICAgIGxldCBsaXN0ID0gdGhpcy5kYXRhW3RoaXMudHlwZV0ubGlzdDtcclxuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gbGlzdC5sZW5ndGggLSAxICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3VyckluZGV4ID0gaW5kZXg7XHJcblxyXG4gICAgICAgIC8vIOS7t+agvOaWh+acrFxyXG4gICAgICAgIHRoaXMuaXRlbUxlYi50ZXh0ID0gXCJ4IFwiICsgbGlzdFtpbmRleF0uaXRlbTtcclxuICAgICAgICBpZiAodGhpcy50eXBlID09IFwiZGlhbW9uZFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlhbW9uZEltZy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMucHJpY2VMYWIudGV4dCA9IFwi77+lIFwiICsgbGlzdFtpbmRleF0ucHJpY2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kaWFtb25kSW1nLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBsZXQgcHJpY2UgPSBsaXN0W2luZGV4XS5wcmljZSArIFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMucHJpY2VMYWIudGV4dCA9IFwieCBcIiArIHByaWNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHByaWNlLmxlbmd0aCA+IDMpIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmljZUxhYi5mb250U2l6ZSA9IDI1O1xyXG4gICAgICAgICAgICBlbHNlIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmljZUxhYi5mb250U2l6ZSA9IDMwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5bem5Y+z5oyJ6ZKu54q25oCBXHJcbiAgICAgICAgaWYgKHRoaXMuY3VyckluZGV4ID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VyckluZGV4ID09IGxpc3QubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0QnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0QnRuLmRpc2FibGVkKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0QnRuLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0QnRuLmRpc2FibGVkKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qKlRoaXMgY2xhc3MgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgTGF5YUFpcklERSwgcGxlYXNlIGRvIG5vdCBtYWtlIGFueSBtb2RpZmljYXRpb25zLiAqL1xuaW1wb3J0IFZpZXc9TGF5YS5WaWV3O1xuaW1wb3J0IERpYWxvZz1MYXlhLkRpYWxvZztcbmltcG9ydCBTY2VuZT1MYXlhLlNjZW5lO1xuZXhwb3J0IG1vZHVsZSB1aSB7XHJcbiAgICBleHBvcnQgY2xhc3MgR2FtZVVJIGV4dGVuZHMgVmlldyB7XHJcblx0XHRwdWJsaWMgc3RhcnRCdG46TGF5YS5CdXR0b247XG5cdFx0cHVibGljIGJveDpMYXlhLkJveDtcbiAgICAgICAgY29uc3RydWN0b3IoKXsgc3VwZXIoKX1cclxuICAgICAgICBjcmVhdGVDaGlsZHJlbigpOnZvaWQge1xyXG4gICAgICAgICAgICBzdXBlci5jcmVhdGVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRTY2VuZShcIkdhbWVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXhwb3J0IGNsYXNzIExvYWRVSSBleHRlbmRzIFZpZXcge1xyXG5cdFx0cHVibGljIGxvYWRJbWc6TGF5YS5JbWFnZTtcblx0XHRwdWJsaWMgbnVtVHh0OmxheWEuZGlzcGxheS5UZXh0O1xuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwiTG9hZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBleHBvcnQgY2xhc3MgTWFpblVJIGV4dGVuZHMgVmlldyB7XHJcblx0XHRwdWJsaWMgYWRkQmVhbkJ0bjpMYXlhLkJ1dHRvbjtcblx0XHRwdWJsaWMgYWRkRGlhbW9uZEJ0bjpMYXlhLkJ1dHRvbjtcblx0XHRwdWJsaWMgb25lU2l0ZUJ0bjpMYXlhLkJ1dHRvbjtcbiAgICAgICAgY29uc3RydWN0b3IoKXsgc3VwZXIoKX1cclxuICAgICAgICBjcmVhdGVDaGlsZHJlbigpOnZvaWQge1xyXG4gICAgICAgICAgICBzdXBlci5jcmVhdGVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRTY2VuZShcIk1haW5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXhwb3J0IGNsYXNzIFNob3BVSSBleHRlbmRzIERpYWxvZyB7XHJcblx0XHRwdWJsaWMgaWNvbkltZzpMYXlhLlNwcml0ZTtcblx0XHRwdWJsaWMgbGVmdEJ0bjpMYXlhLkJ1dHRvbjtcblx0XHRwdWJsaWMgcmlnaHRCdG46TGF5YS5CdXR0b247XG5cdFx0cHVibGljIGl0ZW1MZWI6TGF5YS5MYWJlbDtcblx0XHRwdWJsaWMgZGlhbW9uZEltZzpMYXlhLkltYWdlO1xuXHRcdHB1YmxpYyBwcmljZUxhYjpMYXlhLkxhYmVsO1xuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwiU2hvcFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cciJdfQ==
